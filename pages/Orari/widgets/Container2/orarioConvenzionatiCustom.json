{
  "backgroundColor": "#FFFFFF",
  "borderColor": "#E0DEDE",
  "borderRadius": "{{appsmith.theme.borderRadius.appBorderRadius}}",
  "borderWidth": "1",
  "bottomRow": 41,
  "bottomRowBeforeCollapse": 51,
  "boxShadow": "{{appsmith.theme.boxShadow.appBoxShadow}}",
  "defaultModel": "{{appsmith.store.orarioConvenzionatoSelezionato }}",
  "dynamicBindingPathList": [
    {
      "key": "theme"
    },
    {
      "key": "borderRadius"
    },
    {
      "key": "boxShadow"
    },
    {
      "key": "defaultModel"
    }
  ],
  "dynamicHeight": "FIXED",
  "dynamicPropertyPathList": [],
  "dynamicTriggerPathList": [
    {
      "key": "onResetClick"
    }
  ],
  "events": [
    "onResetClick"
  ],
  "isCanvas": false,
  "isLoading": false,
  "isSearchWildcard": true,
  "isVisible": true,
  "key": "bpmodunk2m",
  "leftColumn": 0,
  "maxDynamicHeight": 9000,
  "minDynamicHeight": 4,
  "mobileBottomRow": 49,
  "mobileLeftColumn": 36,
  "mobileRightColumn": 59,
  "mobileTopRow": 19,
  "needsErrorInfo": false,
  "onResetClick": "{{showAlert('Successfully reset!!', '');}}",
  "originalBottomRow": 51,
  "originalTopRow": 0,
  "parentColumnSpace": 20.25,
  "parentId": "iah993xew8",
  "parentRowSpace": 10,
  "renderMode": "CANVAS",
  "rightColumn": 64,
  "srcDoc": {
    "css": ".widget-outer-wrapper {\n  width: 100%;\n  height: 100%;\n  display: flex;\n  flex-direction: column;\n  justify-content: center;\n  align-items: center;\n}\n\n.schedule {\n  font-family: Arial, sans-serif;\n  background-color: #f8f9fa;\n  padding: 20px;\n  border-radius: 8px;\n  box-shadow: var(--appsmith-theme-boxShadow);\n  display: flex;\n  overflow-x: auto;\n  margin-left: auto;\n  margin-right: auto;\n}\n\n.day-container {\n  margin-right: 20px;\n  min-width: 150px;\n}\n\n.day-header {\n  font-weight: bold;\n  margin-bottom: 10px;\n  text-align: center;\n}\n\n.time-slot {\n  margin-bottom: 10px;\n  padding: 10px;\n  border-radius: 4px;\n  background-color: #fff;\n  box-shadow: 0 1px 3px rgba(0, 0, 0, 0.1);\n  position: relative;\n}\n\n.time-details {\n  display: flex;\n  flex-direction: column;\n  justify-content: center;\n  align-items: center;\n  position: relative;\n  margin-bottom: 5px;\n}\n\n.total-hours {\n  font-size: 12px;\n  color: grey;\n  text-align: center;\n}\n\n.location-and-buttons {\n  display: flex;\n  justify-content: center;\n  align-items: center;\n  font-weight: bold;\n  margin-top: 5px;\n}\n\n.district {\n  text-align: center;\n  font-size: 12px;\n  color: grey;\n}\n\nbutton {\n  background: none;\n  border: none;\n  cursor: pointer;\n  font-size: 14px;\n  position: absolute;\n  top: 4px;\n  right: 4px;\n  transform: scale(1);\n  transition: transform 0.2s, color 0.2s;\n}\n\nbutton:hover {\n  transform: scale(1.2);\n  color: darkred;\n}\n\n.delete-button i {\n  color: red;\n}",
    "html": "<link\n  rel=\"stylesheet\"\n  href=\"https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.0.0-beta3/css/all.min.css\"\n/>\n<div id=\"root\"></div>",
    "js": "import React from 'https://cdn.jsdelivr.net/npm/react@18.2.0/+esm';\nimport ReactDOM from 'https://cdn.jsdelivr.net/npm/react-dom@18.2.0/+esm';\nfunction ScheduleWidget() {\n  // Converts time strings to Date objects\n  const parseTime = timeStr => {\n    const [hours, minutes] = timeStr.split(':');\n    return new Date(0, 0, 0, parseInt(hours), parseInt(minutes));\n  };\n\n  // Calculate the total number of hours between two time strings\n  const calculateTotalHours = (from, to) => {\n    const fromTime = parseTime(from);\n    const toTime = parseTime(to);\n    const hourDiff = (toTime - fromTime) / (1000 * 60 * 60);\n    return parseFloat(Math.abs(hourDiff).toFixed(2));\n  };\n\n  // Hook for reading and updating only the model, no fallback/mock\n  const [schedule, setSchedule] = React.useState(appsmith.model);\n  React.useEffect(() => {\n    // Update state ONLY with the new model received\n    appsmith.onModelChange(newModel => {\n      setSchedule(newModel);\n    });\n  }, []);\n  const handleDelete = (day, index) => {\n    const confirmDelete = confirm(`Sicuri di cancellare questo turno ${day}?`);\n    if (confirmDelete) {\n      const updatedSchedule = {\n        ...schedule\n      };\n      updatedSchedule[day].splice(index, 1);\n      setSchedule({\n        ...updatedSchedule\n      });\n      appsmith.triggerEvent(\"onAction\", {\n        day,\n        action: \"delete\",\n        index\n      });\n    }\n  };\n  return /*#__PURE__*/React.createElement(\"div\", {\n    className: \"widget-outer-wrapper\"\n  }, /*#__PURE__*/React.createElement(\"div\", {\n    className: \"schedule\"\n  }, Object.entries(schedule || {}).map(([day, slots]) => /*#__PURE__*/React.createElement(\"div\", {\n    className: \"day-container\",\n    key: day\n  }, /*#__PURE__*/React.createElement(\"div\", {\n    className: \"day-header\"\n  }, day), (slots || []).map((slot, index) => /*#__PURE__*/React.createElement(\"div\", {\n    className: \"time-slot\",\n    key: index\n  }, /*#__PURE__*/React.createElement(\"button\", {\n    className: \"delete-button\",\n    onClick: () => handleDelete(day, index)\n  }, /*#__PURE__*/React.createElement(\"i\", {\n    className: \"fas fa-trash\"\n  })), /*#__PURE__*/React.createElement(\"div\", {\n    className: \"time-details\"\n  }, /*#__PURE__*/React.createElement(\"div\", null, /*#__PURE__*/React.createElement(\"span\", null, slot.from), \" - \", /*#__PURE__*/React.createElement(\"span\", null, slot.to), /*#__PURE__*/React.createElement(\"div\", {\n    className: \"total-hours\"\n  }, calculateTotalHours(slot.from, slot.to), \" ore\"))), /*#__PURE__*/React.createElement(\"div\", {\n    className: \"location-and-buttons\"\n  }, /*#__PURE__*/React.createElement(\"span\", null, slot.location)), /*#__PURE__*/React.createElement(\"div\", {\n    className: \"district\"\n  }, /*#__PURE__*/React.createElement(\"span\", null, slot.district))))))));\n}\nappsmith.onReady(() => {\n  ReactDOM.render(/*#__PURE__*/React.createElement(ScheduleWidget, null), document.getElementById(\"root\"));\n});"
  },
  "theme": "{{appsmith.theme}}",
  "topRow": 0,
  "topRowBeforeCollapse": 0,
  "type": "CUSTOM_WIDGET",
  "uncompiledSrcDoc": {
    "css": ".widget-outer-wrapper {\n  width: 100%;\n  height: 100%;\n  display: flex;\n  flex-direction: column;\n  justify-content: center;\n  align-items: center;\n}\n.schedule {\n  font-family: Arial, sans-serif;\n  background-color: #f8f9fa;\n  padding: 20px;\n  border-radius: 8px;\n  box-shadow: var(--appsmith-theme-boxShadow);\n  display: flex;\n  overflow-x: auto;\n  margin-left: auto;\n  margin-right: auto;\n}\n\n.day-container {\n  margin-right: 20px;\n  min-width: 150px;\n}\n\n.day-header {\n  font-weight: bold;\n  margin-bottom: 10px;\n  text-align: center;\n}\n\n.time-slot {\n  margin-bottom: 10px;\n  padding: 10px;\n  border-radius: 4px;\n  background-color: #fff;\n  box-shadow: 0 1px 3px rgba(0,0,0,0.1);\n  position: relative;\n}\n\n.time-details {\n  display: flex;\n  flex-direction: column;\n  justify-content: center;\n  align-items: center;\n  position: relative;\n  margin-bottom: 5px;\n}\n\n.total-hours {\n  font-size: 12px;\n  color: grey;\n  text-align: center;\n}\n\n.location-and-buttons {\n  display: flex;\n  justify-content: center;\n  align-items: center;\n  font-weight: bold;\n  margin-top: 5px;\n}\n\n.district {\n  text-align: center;\n  font-size: 12px;\n  color: grey;\n}\n\nbutton {\n  background: none;\n  border: none;\n  cursor: pointer;\n  font-size: 14px;\n  position: absolute;\n  top: 4px;\n  right: 4px;\n  transform: scale(1);\n  transition: transform 0.2s, color 0.2s;\n}\n\nbutton:hover {\n  transform: scale(1.2);\n  color: darkred;\n}\n\n.delete-button i {\n  color: red;\n}",
    "html": "<link\n  rel=\"stylesheet\"\n  href=\"https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.0.0-beta3/css/all.min.css\"\n/>\n<div id=\"root\"></div>",
    "js": "import React from 'https://cdn.jsdelivr.net/npm/react@18.2.0/+esm';\nimport ReactDOM from 'https://cdn.jsdelivr.net/npm/react-dom@18.2.0/+esm';\n\nfunction ScheduleWidget() {\n  // Converts time strings to Date objects\n  const parseTime = (timeStr) => {\n    const [hours, minutes] = timeStr.split(':');\n    return new Date(0, 0, 0, parseInt(hours), parseInt(minutes));\n  };\n\n  // Calculate the total number of hours between two time strings\n  const calculateTotalHours = (from, to) => {\n    const fromTime = parseTime(from);\n    const toTime = parseTime(to);\n    const hourDiff = (toTime - fromTime) / (1000 * 60 * 60);\n    return parseFloat(Math.abs(hourDiff).toFixed(2));\n  };\n\n  // Hook for reading and updating only the model, no fallback/mock\n  const [schedule, setSchedule] = React.useState(appsmith.model);\n\n  React.useEffect(() => {\n    // Update state ONLY with the new model received\n    appsmith.onModelChange((newModel) => {\n      setSchedule(newModel);\n    });\n  }, []);\n\n  const handleDelete = (day, index) => {\n    const confirmDelete = confirm(`Sicuri di cancellare questo turno ${day}?`);\n    if (confirmDelete) {\n      const updatedSchedule = { ...schedule };\n      updatedSchedule[day].splice(index, 1);\n      setSchedule({ ...updatedSchedule });\n      appsmith.triggerEvent(\"onAction\", { day, action: \"delete\", index });\n    }\n  };\n\n  return (\n    <div className=\"widget-outer-wrapper\">\n      <div className=\"schedule\">\n        {Object.entries(schedule || {}).map(([day, slots]) => (\n          <div className=\"day-container\" key={day}>\n            <div className=\"day-header\">{day}</div>\n            {(slots || []).map((slot, index) => (\n              <div className=\"time-slot\" key={index}>\n                <button className=\"delete-button\" onClick={() => handleDelete(day, index)}>\n                  <i className=\"fas fa-trash\"></i>\n                </button>\n                <div className=\"time-details\">\n                  <div>\n                    <span>{slot.from}</span> - <span>{slot.to}</span>\n                    <div className=\"total-hours\">\n                      {calculateTotalHours(slot.from, slot.to)} ore\n                    </div>\n                  </div>\n                </div>\n                <div className=\"location-and-buttons\">\n                  <span>{slot.location}</span>\n                </div>\n                <div className=\"district\">\n                  <span>{slot.district}</span>\n                </div>\n              </div>\n            ))}\n          </div>\n        ))}\n      </div>\n    </div>\n  );\n}\n\nappsmith.onReady(() => {\n  ReactDOM.render(<ScheduleWidget />, document.getElementById(\"root\"));\n});"
  },
  "version": 1,
  "widgetId": "mz9x7fxjo8",
  "widgetName": "orarioConvenzionatiCustom"
}