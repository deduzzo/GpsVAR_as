{
  "backgroundColor": "#FFFFFF",
  "borderColor": "#ffffff",
  "borderRadius": "0px",
  "borderWidth": "0",
  "bottomRow": 26,
  "boxShadow": "none",
  "defaultModel": "{\n\"time\": \"{{appsmith.store.orarioDaModificare.uscita}}\",\n\t\t\t\"text\": \"Uscita\",\n\t\t\t\"size\":\"S\"\n}",
  "dynamicBindingPathList": [
    {
      "key": "theme"
    },
    {
      "key": "defaultModel"
    }
  ],
  "dynamicHeight": "FIXED",
  "dynamicPropertyPathList": [],
  "dynamicTriggerPathList": [
    {
      "key": "onResetClick"
    },
    {
      "key": "onChange"
    }
  ],
  "events": [
    "onResetClick",
    "onChange"
  ],
  "isCanvas": false,
  "isLoading": false,
  "isSearchWildcard": true,
  "isVisible": true,
  "key": "wsnzwmdw9t",
  "leftColumn": 22,
  "maxDynamicHeight": 9000,
  "minDynamicHeight": 4,
  "mobileBottomRow": 38,
  "mobileLeftColumn": 26,
  "mobileRightColumn": 49,
  "mobileTopRow": 8,
  "needsErrorInfo": false,
  "onChange": "{{orariFunctions.onOrarioChange('inizio', time);}}",
  "onResetClick": "{{showAlert('Successfully reset!!', '');}}",
  "originalBottomRow": 25,
  "originalTopRow": 19,
  "parentColumnSpace": 9.84375,
  "parentId": "y0t1jrcpqh",
  "parentRowSpace": 10,
  "renderMode": "CANVAS",
  "rightColumn": 40,
  "shouldScrollContents": true,
  "srcDoc": {
    "css": ".time-picker-widget {\n  display: flex;\n  align-items: center;\n  gap: 12px;\n  margin-left: auto;\n  background: none;\n  box-shadow: none;\n  border-radius: 0;\n  font-family: system-ui;\n  padding: 0;\n  min-width: 0;\n  min-height: 0;\n  overflow: visible;\n}\n\n.time-picker-label {\n  font-weight: 600;\n  font-size: 15px;\n  color: #222;\n  margin-right: 8px;\n}\n\n.time-selector {\n  display: flex;\n  align-items: center;\n  gap: 4px;\n}\n\n.time-selector select {\n  appearance: none;\n  background: #f9f9f9;\n  border: 1px solid #d7d7d7;\n  border-radius: 4px;\n  outline: none;\n  transition: border-color 0.2s;\n  min-width: 0;\n  min-height: 0;\n  overflow: visible;\n}\n\n.time-selector select:focus {\n  border-color: var(--appsmith-theme-primaryColor);\n}\n\n.time-separator {\n  font-size: 16px;\n  font-weight: 700;\n  padding: 0 3px;\n  user-select: none;\n}\n\n.time-picker-xs {\n  font-size: 11px;\n  padding: 0;\n}\n\n.time-picker-xs select {\n  padding: 2px 4px;\n  font-size: 11px;\n}\n\n.time-picker-s {\n  font-size: 13px;\n  padding: 0;\n}\n\n.time-picker-s select {\n  padding: 5px 10px;\n  font-size: 13px;\n}\n\n.time-picker-m {\n  font-size: 15px;\n  padding: 0;\n}\n\n.time-picker-m select {\n  padding: 7px 13px;\n  font-size: 15px;\n}\n\n.time-picker-l {\n  font-size: 16px;\n  padding: 0;\n}\n\n.time-picker-l select {\n  padding: 8px 12px;\n  font-size: 16px;\n}\n\n.time-picker-xl {\n  font-size: 20px;\n  padding: 0;\n}\n\n.time-picker-xl select {\n  padding: 13px 22px;\n  font-size: 20px;\n}",
    "html": "<div id=\"root\"></div>",
    "js": "import React from \"https://esm.sh/react@18.2.0\";\nimport ReactDOM from \"https://esm.sh/react-dom@18.2.0\";\nconst pad = n => n.toString().padStart(2, \"0\");\nfunction parseTime(str) {\n  if (typeof str !== \"string\") return {\n    hour: 0,\n    minute: 0\n  };\n  const [h, m] = str.split(\":\").map(Number);\n  if (!isNaN(h) && h >= 0 && h < 24 && !isNaN(m) && m >= 0 && m < 60) {\n    return {\n      hour: h,\n      minute: m\n    };\n  }\n  return {\n    hour: 0,\n    minute: 0\n  };\n}\nconst sizeClassMap = {\n  XS: \"time-picker-xs\",\n  S: \"time-picker-s\",\n  M: \"time-picker-m\",\n  L: \"time-picker-l\",\n  XL: \"time-picker-xl\"\n};\nfunction TimePicker() {\n  // Leggi parametri da model con fallback\n  const initialStr = appsmith.model?.time || \"00:00\";\n  const sizeRaw = appsmith.model?.size || \"L\";\n  const size = typeof sizeRaw === \"string\" && sizeClassMap[sizeRaw.toUpperCase()] ? sizeRaw.toUpperCase() : \"L\";\n  const text = typeof appsmith.model?.text === \"string\" && appsmith.model?.text.trim() ? appsmith.model.text : \"Orario\";\n  const [time, setTime] = React.useState(() => parseTime(initialStr));\n  const [sizeState, setSizeState] = React.useState(size);\n  const [textState, setTextState] = React.useState(text);\n\n  // Forza l'aggiornamento ogni volta che il model cambia (compresa la prop \"time\")\n  React.useEffect(() => {\n    return appsmith.onModelChange((model, prevModel) => {\n      if (model?.time !== prevModel?.time) {\n        setTime(parseTime(model?.time));\n      }\n      if (model?.size !== prevModel?.size && sizeClassMap[model?.size?.toUpperCase()]) {\n        setSizeState(model.size.toUpperCase());\n      }\n      if (model?.text !== prevModel?.text && typeof model.text === \"string\" && model.text.trim()) {\n        setTextState(model.text);\n      }\n    });\n  }, []);\n  const handleChange = React.useCallback(e => {\n    const name = e.target.name;\n    const value = parseInt(e.target.value, 10) || 0;\n    const newTime = {\n      ...time,\n      [name]: value\n    };\n    setTime(newTime);\n    appsmith.triggerEvent(\"onChange\", pad(newTime.hour) + \":\" + pad(newTime.minute));\n  }, [time]);\n  const hourOptions = [];\n  for (let i = 0; i < 24; ++i) hourOptions.push(/*#__PURE__*/React.createElement(\"option\", {\n    key: i,\n    value: i\n  }, pad(i)));\n  const minOptions = [];\n  for (let i = 0; i < 60; ++i) minOptions.push(/*#__PURE__*/React.createElement(\"option\", {\n    key: i,\n    value: i\n  }, pad(i)));\n  return /*#__PURE__*/React.createElement(\"div\", {\n    className: `time-picker-widget ${sizeClassMap[sizeState] || sizeClassMap.L}`\n  }, /*#__PURE__*/React.createElement(\"label\", {\n    className: \"time-picker-label\"\n  }, textState, \":\"), /*#__PURE__*/React.createElement(\"div\", {\n    className: \"time-selector\"\n  }, /*#__PURE__*/React.createElement(\"select\", {\n    name: \"hour\",\n    value: time.hour,\n    onChange: handleChange\n  }, hourOptions), /*#__PURE__*/React.createElement(\"span\", {\n    className: \"time-separator\"\n  }, \":\"), /*#__PURE__*/React.createElement(\"select\", {\n    name: \"minute\",\n    value: time.minute,\n    onChange: handleChange\n  }, minOptions)));\n}\nappsmith.onReady(() => {\n  ReactDOM.render(/*#__PURE__*/React.createElement(TimePicker, null), document.getElementById(\"root\"));\n});\n\n// Il widget aggiorna automaticamente il valore mostrato quando cambia appsmith.model.time,\n// senza necessit√† di invocare eventi manualmente da Appsmith.\n// Se il dato non si aggiorna, verifica che il model sia modificato davvero (\"time\" cambiato)."
  },
  "theme": "{{appsmith.theme}}",
  "topRow": 20,
  "type": "CUSTOM_WIDGET",
  "uncompiledSrcDoc": {
    "css": ".time-picker-widget {\n  display: flex;\n  align-items: center;\n  gap: 12px;\n  margin-left: auto;\n  background: none;\n  box-shadow: none;\n  border-radius: 0;\n  font-family: system-ui;\n  padding: 0;\n  min-width: 0;\n  min-height: 0;\n  overflow: visible;\n}\n\n.time-picker-label {\n  font-weight: 600;\n  font-size: 15px;\n  color: #222;\n  margin-right: 8px;\n}\n\n.time-selector {\n  display: flex;\n  align-items: center;\n  gap: 4px;\n}\n\n.time-selector select {\n  appearance: none;\n  background: #f9f9f9;\n  border: 1px solid #d7d7d7;\n  border-radius: 4px;\n  outline: none;\n  transition: border-color 0.2s;\n  min-width: 0;\n  min-height: 0;\n  overflow: visible;\n}\n\n.time-selector select:focus {\n  border-color: var(--appsmith-theme-primaryColor);\n}\n\n.time-separator {\n  font-size: 16px;\n  font-weight: 700;\n  padding: 0 3px;\n  user-select: none;\n}\n.time-picker-xs {\n  font-size: 11px;\n  padding: 0;\n}\n.time-picker-xs select {\n  padding: 2px 4px;\n  font-size: 11px;\n}\n.time-picker-s {\n  font-size: 13px;\n  padding: 0;\n}\n.time-picker-s select {\n  padding: 5px 10px;\n  font-size: 13px;\n}\n.time-picker-m {\n  font-size: 15px;\n  padding: 0;\n}\n.time-picker-m select {\n  padding: 7px 13px;\n  font-size: 15px;\n}\n.time-picker-l {\n  font-size: 16px;\n  padding: 0;\n}\n.time-picker-l select {\n  padding: 8px 12px;\n  font-size: 16px;\n}\n.time-picker-xl {\n  font-size: 20px;\n  padding: 0;\n}\n.time-picker-xl select {\n  padding: 13px 22px;\n  font-size: 20px;\n}\n",
    "html": "<div id=\"root\"></div>",
    "js": "import React from \"https://esm.sh/react@18.2.0\";\nimport ReactDOM from \"https://esm.sh/react-dom@18.2.0\";\n\nconst pad = (n) => n.toString().padStart(2, \"0\");\nfunction parseTime(str) {\n  if (typeof str !== \"string\") return { hour: 0, minute: 0 };\n  const [h, m] = str.split(\":\").map(Number);\n  if (!isNaN(h) && h >= 0 && h < 24 && !isNaN(m) && m >= 0 && m < 60) {\n    return { hour: h, minute: m };\n  }\n  return { hour: 0, minute: 0 };\n}\n\nconst sizeClassMap = {\n  XS: \"time-picker-xs\",\n  S: \"time-picker-s\",\n  M: \"time-picker-m\",\n  L: \"time-picker-l\",\n  XL: \"time-picker-xl\",\n};\n\nfunction TimePicker() {\n  // Leggi parametri da model con fallback\n  const initialStr = appsmith.model?.time || \"00:00\";\n  const sizeRaw = appsmith.model?.size || \"L\";\n  const size = (typeof sizeRaw === \"string\" && sizeClassMap[sizeRaw.toUpperCase()]) ? sizeRaw.toUpperCase() : \"L\";\n  const text = typeof appsmith.model?.text === \"string\" && appsmith.model?.text.trim() ? appsmith.model.text : \"Orario\";\n\n  const [time, setTime] = React.useState(() => parseTime(initialStr));\n  const [sizeState, setSizeState] = React.useState(size);\n  const [textState, setTextState] = React.useState(text);\n\n  // Forza l'aggiornamento ogni volta che il model cambia (compresa la prop \"time\")\n  React.useEffect(() => {\n    return appsmith.onModelChange((model, prevModel) => {\n      if (model?.time !== prevModel?.time) {\n        setTime(parseTime(model?.time));\n      }\n      if (model?.size !== prevModel?.size && sizeClassMap[model?.size?.toUpperCase()]) {\n        setSizeState(model.size.toUpperCase());\n      }\n      if (model?.text !== prevModel?.text && typeof model.text === \"string\" && model.text.trim()) {\n        setTextState(model.text);\n      }\n    });\n  }, []);\n\n  const handleChange = React.useCallback((e) => {\n    const name = e.target.name;\n    const value = parseInt(e.target.value, 10) || 0;\n    const newTime = { ...time, [name]: value };\n    setTime(newTime);\n    appsmith.triggerEvent(\"onChange\", pad(newTime.hour) + \":\" + pad(newTime.minute));\n  }, [time]);\n\n  const hourOptions = [];\n  for (let i = 0; i < 24; ++i) hourOptions.push(<option key={i} value={i}>{pad(i)}</option>);\n  const minOptions = [];\n  for (let i = 0; i < 60; ++i) minOptions.push(<option key={i} value={i}>{pad(i)}</option>);\n\n  return (\n    <div className={`time-picker-widget ${sizeClassMap[sizeState] || sizeClassMap.L}`}>\n      <label className=\"time-picker-label\">{textState}:</label>\n      <div className=\"time-selector\">\n        <select name=\"hour\" value={time.hour} onChange={handleChange}>\n          {hourOptions}\n        </select>\n        <span className=\"time-separator\">:</span>\n        <select name=\"minute\" value={time.minute} onChange={handleChange}>\n          {minOptions}\n        </select>\n      </div>\n    </div>\n  );\n}\n\nappsmith.onReady(() => {\n  ReactDOM.render(<TimePicker />, document.getElementById(\"root\"));\n});\n\n// Il widget aggiorna automaticamente il valore mostrato quando cambia appsmith.model.time,\n// senza necessit√† di invocare eventi manualmente da Appsmith.\n// Se il dato non si aggiorna, verifica che il model sia modificato davvero (\"time\" cambiato)."
  },
  "version": 1,
  "widgetId": "88v94i2962",
  "widgetName": "inizioTimeCopy"
}